#cloud-config

---
write_files:
- path: /opt/bin/wait4etcdproxy.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://127.0.0.1:4001/v2/machines; do sleep 2; done
coreos:
  etcd2:
    name: etcd
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    initial-cluster: etcd=http://$private_ipv4:2380
    initial-advertise-peer-urls: http://$private_ipv4:2380
    listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
    advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
    initial-cluster-state: new
  fleet:
    etcd-servers: http://0.0.0.0:4001
    public-ip: $private_ipv4
    metadata: "role=etcd"
  units:
<% if drive_type == 'ebs' %>
    - name: format-ebs.service
      command: start
      content: |
        [Unit]
        Description=Formats the EBS drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/xvdf
        ExecStart=/usr/sbin/mkfs.ext4 -F /dev/xvdf
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount EBS to /var/lib/docker
        Requires=format-ebs.service
        After=format-ebs.service
        Before=docker.service
        [Mount]
        What=/dev/xvdf
        Where=/var/lib/docker
        Type=ext4
<% end %>
<% if drive_type == 'ephemeral' %>
    - name: format-ephemeral.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/xvdb
        ExecStart=/usr/sbin/mkfs.ext4 -F /dev/xvdb
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        Before=docker.service
        [Mount]
        What=/dev/xvdb
        Where=/var/lib/docker
        Type=ext4
<% end %>
    - name: wait4etcdproxy.service
      command: start
      content: |
        [Unit]
        Description=etcd wait4etcdproxy
        Wants=etcd2.service
        After=etcd2.service
        Before=fleet.service

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/wait4etcdproxy.sh
        ExecStart=/usr/bin/bash /opt/bin/wait4etcdproxy.sh
        RemainAfterExit=true
        Type=oneshot
    - name: docker-cache.service
      command: start
      content: |
        [Unit]
        Description=Docker cache proxy
        Requires=early-docker.service
        After=early-docker.service
        Before=early-docker.target
        [Service]
        Environment="TMPDIR=/var/tmp/"
        Environment="DOCKER_HOST=unix:///var/run/early-docker.sock"
        ExecStartPre=-/usr/bin/docker kill docker-registry
        ExecStartPre=-/usr/bin/docker rm docker-registry
        ExecStartPre=/usr/bin/docker pull quay.io/devops/docker-registry:latest
        # GUNICORN_OPTS is an workaround for
        # https://github.com/docker/docker-registry/issues/892
        ExecStart=/usr/bin/docker run --rm --net host --name docker-registry \
            -e STANDALONE=false \
            -e GUNICORN_OPTS=[--preload] \
            -e MIRROR_SOURCE=https://registry-1.docker.io \
            -e MIRROR_SOURCE_INDEX=https://index.docker.io \
            -e MIRROR_TAGS_CACHE_TTL=1800 \
            quay.io/devops/docker-registry:latest
        Restart=always
        TimeoutStartSec=0
        RestartSec=5
    - name: fleet.service
      command: start
    - name: systemd-journal-gatewayd.socket
      command: start
      enable: yes
      content: |
        [Unit] 
        Description=Journal Gateway Service Socket
        [Socket] 
        ListenStream=/var/run/journald.sock
        Service=systemd-journal-gatewayd.service
        [Install] 
        WantedBy=sockets.target
<% if enable_logentries %>
    - name: logentries-token.service
      command: start
      content: |
        [Unit]
        Description=sets a logentries token in etcd
        After=etcd2.service
        Before=journal-2-logentries.service

        [Service]
        ExecStart=/usr/bin/etcdctl set /logentries.com/token <%= logentries_token %>
        RemainAfterExit=true
        Type=oneshot
    - name: logentries-url.service
      command: start
      content: |
        [Unit]
        Description=sets a logentries url in etcd
        After=etcd2.service
        Before=journal-2-logentries.service

        [Service]
        ExecStart=/usr/bin/etcdctl set /logentries.com/url <%= logentries_url %>
        RemainAfterExit=true
        Type=oneshot
    - name: journal-2-logentries.service
      command: start
      content: |
        [Unit]
        Description=Forward Systemd Journal to logentries.com
        After=docker.service
        Requires=docker.service
        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker kill journal-2-logentries
        ExecStartPre=-/usr/bin/docker rm journal-2-logentries
        ExecStartPre=/usr/bin/docker pull quay.io/kelseyhightower/journal-2-logentries
        ExecStart=/usr/bin/bash -c \
        "/usr/bin/docker run --name journal-2-logentries \
        -v /run/journald.sock:/run/journald.sock \
        -e LOGENTRIES_TOKEN=`etcdctl get /logentries.com/token` \
        -e LOGENTRIES_URL=`etcdctl get /logentries.com/url` \
        quay.io/kelseyhightower/journal-2-logentries"
<% end %>
  update:
    group: alpha
    reboot-strategy: <%= reboot_strategy %>