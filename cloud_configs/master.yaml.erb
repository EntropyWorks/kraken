#cloud-config

---
write_files:
- path: /opt/bin/download-kraken-services.sh
  owner: root
  content: |
    #! /usr/bin/bash
    set -x
    mkdir -p /opt/bin/kraken-services && cd /opt/bin/kraken-services
    git clone <%= kraken_services_repo %> .
    # use explicit form incase branch name matches filename in repo and avoids shortcut
    git checkout -B <%= kraken_services_branch %> origin/<%= kraken_services_branch %>
- path: /opt/bin/wait4etcd.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://<%= etcd_cluster_ip %>:4001/v2/machines; do sleep 2; done
- path: /opt/bin/wait4etcdproxy.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://127.0.0.1:4001/v2/machines; do sleep 2; done
- path: /opt/bin/wait4finalnode.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until curl http://<%= final_node_ip %>:10255/stats/; do sleep 2; done
- path: /opt/bin/wait4dns.sh
  owner: root
  content: |
    #! /usr/bin/bash
    until 
- path: /opt/bin/flannelconfig.sh
  owner: root
  content: |
    #! /usr/bin/bash
    /usr/bin/etcdctl set /coreos.com/network/config '{"Network":"10.244.0.0/16", "Backend": {"Type": "vxlan"}}' 
- path: /opt/bin/kraken-render.sh
  owner: root
  content: |
    #! /usr/bin/bash
    set -x
    cd /opt/bin/kraken-services
    sed -e 's,$KUBE_MASTER_URL,http://<%= master_cluster_ip %>:8080,g' \
        -e 's,$CLUSTER_DOMAIN,<%= dns_domain %>,g' \
        -e 's,$INFLUXDB_EXTERNAL_HOST,<%= node_01_public_ip %>,g' \
        -e 's,$KUBE_CONTROLLER_IP,<%= master_cluster_ip %>,g' \
        -e 's,$KUBE_SCHEDULER_IP,<%= master_cluster_ip %>,g' \
        -e 's,$DOCKERCFG_BASE64,<%= dockercfg_base64 %>,g' \
        -i -- ./*/*.{json,yaml}
- path: /opt/bin/kraken-create.sh
  owner: root
  content: |
    #! /usr/bin/bash
    set -x
    cd /opt/bin/kraken-services
    for dir in $*; do
      /opt/bin/kubectl --server=http://<%= master_cluster_ip %>:8080 create -f ./$dir/
    done
- path: /opt/bin/wait4skydns.sh
  owner: root
  content: |
    #! /usr/bin/bash
    sleep 60
coreos:
  etcd2:
    proxy: on
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    advertise-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    initial-cluster: etcd=http://<%= etcd_cluster_ip %>:2380
  fleet:
    etcd-servers: http://$private_ipv4:4001
    public-ip: $public_ipv4
    metadata: "role=master"
  flannel:
    etcd-endpoints: http://<%= etcd_cluster_ip %>:4001
    interface: $private_ipv4
  units:
    <% if drive_type == 'ebs' %>
    - name: format-ebs.service
      command: start
      content: |
        [Unit]
        Description=Formats the EBS drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/xvdf
        ExecStart=/usr/sbin/mkfs.ext4 -F /dev/xvdf
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount EBS to /var/lib/docker
        Requires=format-ebs.service
        After=format-ebs.service
        Before=docker.service
        [Mount]
        What=/dev/xvdf
        Where=/var/lib/docker
        Type=ext4
<% end %>
<% if drive_type == 'ephemeral' %>
    - name: format-ephemeral.service
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/xvdb
        ExecStart=/usr/sbin/mkfs.ext4 -F /dev/xvdb
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        Before=docker.service
        [Mount]
        What=/dev/xvdb
        Where=/var/lib/docker
        Type=ext4
<% end %>
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker TCP Socket for the API

        [Socket]
        ListenStream=0.0.0.0:4243
        BindIPv6Only=both
        Service=docker.service

        [Install]
        WantedBy=sockets.target
    - name: wait4etcd.service
      command: start
      content: |
        [Unit]
        Description=Wait for etcd to come up
        Requires=network-online.target
        After=network-online.target
        Before=flannel.service

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/wait4etcd.sh
        ExecStart=/usr/bin/bash /opt/bin/wait4etcd.sh
        RemainAfterExit=true
        Type=oneshot
    - name: etcd2.service
      command: start
    - name: setup-network-environment.service
      command: start
      content: |
        [Unit]
        Description=Setup Network Environment
        Requires=network-online.target
        After=network-online.target
        Before=flanneld.service

        [Service]
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://github.com/kelseyhightower/setup-network-environment/releases/download/v1.0.0/setup-network-environment
        ExecStartPre=/usr/bin/chmod +x /opt/bin/setup-network-environment
        ExecStart=/opt/bin/setup-network-environment
        RemainAfterExit=yes
        Type=oneshot
    - name: wait4etcdproxy.service
      command: start
      content: |
        [Unit]
        Description=Wait for etcd proxy to come up
        Requires=etcd2.service
        After=etcd2.service
        Before=flannelconfig.service

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/wait4etcdproxy.sh
        ExecStart=/usr/bin/bash /opt/bin/wait4etcdproxy.sh
        RemainAfterExit=true
        Type=oneshot
    - name: flannelconfig.service
      command: start
      content: |
        [Unit]
        Description=write flannel network to etcd
        After=wait4etcdproxy.service

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/flannelconfig.sh
        ExecStart=/usr/bin/bash /opt/bin/flannelconfig.sh
        RemainAfterExit=true
        Type=oneshot
    - name: flanneld.service
      command: start
      drop-ins:
        - name: 50-network-config.conf
          content: |
            [Unit]
            After=flannelconfig.service
            Before=docker.service
    - name: docker.service
      drop-ins:
        - name: 51-docker-flannel.conf
          content: |
            [Unit]
            # startup, otherwise containers won't land in flannel's network...
            Requires=flanneld.service
            After=flanneld.service

            [Service]
            Environment=DOCKER_OPTS='--registry-mirror=http://<%= docker_cache %>:5000'
    - name: fleet.service
      command: start
    - name: install-kubectl.service
      command: start
      content: |
        [Unit]
        Description=Install kubectl client tool
        Requires=network-online.target
        After=network-online.target

        [Service]
        ExecStart=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/<%= kubernetes_release %>/bin/linux/amd64/kubectl
        ExecStart=/usr/bin/chmod +x /opt/bin/kubectl
        Type=oneshot
        RemainAfterExit=true
    - name: kube-apiserver.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes API Server
        After=wait4etcdproxy.service

        [Service]
        LimitNOFILE=infinity
        ExecStartPre=-/usr/bin/mkdir -p /opt/bin
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/<%= kubernetes_release %>/bin/linux/amd64/kube-apiserver
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-apiserver
        ExecStart=/opt/bin/kube-apiserver \
        --insecure_bind_address=0.0.0.0 \
        --insecure_port=8080 \
        --portal_net=10.100.0.0/16 \
        --etcd_servers=http://127.0.0.1:4001 \
        --public_address_override=$private_ipv4 \
        --logtostderr=true \
        --v=<%= kubernetes_verbosity %> \
        --cors_allowed_origins=.* \
        --runtime_config=api/<%= api_version %>
        Restart=always
        RestartSec=10
    - name: kube-controller-manager.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Controller Manager
        Requires=kube-apiserver.service
        After=kube-apiserver.service

        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/<%= kubernetes_release %>/bin/linux/amd64/kube-controller-manager
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-controller-manager
        ExecStart=/opt/bin/kube-controller-manager \
        --address=$private_ipv4 \
        --port=10252 \
        --master=$private_ipv4:8080 \
        --pod_eviction_timeout=1m \
        --resource_quota_sync_period=20s \
        --logtostderr=true \
        --v=<%= kubernetes_verbosity %>
        Restart=always
        RestartSec=10
    - name: kube-scheduler.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Scheduler
        Requires=kube-apiserver.service
        After=kube-apiserver.service

        [Service]
        ExecStartPre=/usr/bin/wget -N -P /opt/bin https://storage.googleapis.com/kubernetes-release/release/<%= kubernetes_release %>/bin/linux/amd64/kube-scheduler
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-scheduler
        ExecStart=/opt/bin/kube-scheduler \
        --address=$private_ipv4
        --port=10251 \
        --master=$private_ipv4:8080 \
        --logtostderr=true \
        --v=<%= kubernetes_verbosity %>
        Restart=always
        RestartSec=10
    - name: kube-register.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes Registration Service
        Requires=kube-apiserver.service
        After=kube-apiserver.service

        [Service]
        ExecStartPre=/usr/bin/wget -O /opt/bin/kube-register \
          https://github.com/kelseyhightower/kube-register/releases/download/v0.0.3/kube-register-0.0.3-linux-amd64
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kube-register
        ExecStart=/opt/bin/kube-register \
        --metadata=role=node \
        --fleet-endpoint=unix:///var/run/fleet.sock \
        --api-endpoint=http://$private_ipv4:8080 \
        --healthz-port=10254
        Restart=always
        RestartSec=10
    - name: wait4finalnode.service
      command: start
      content: |
        [Unit]
        Description=Wait for final node to come up
        Wants=kube-register.service
        After=kube-register.service
        Before=kraken-create-skydns.service

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/wait4finalnode.sh
        ExecStart=/usr/bin/bash /opt/bin/wait4finalnode.sh
        RemainAfterExit=true
        Type=oneshot
    - name: download-kraken-services.service
      command: start
      content: |
        [Unit]
        Description=Download samsung-ag/kraken-services
        Requires=wait4finalnode.service
        After=wait4finalnode.service

        [Service]
        TimeoutStartSec=0
        ExecStart=/usr/bin/bash /opt/bin/download-kraken-services.sh
        RemainAfterExit=true
        Type=oneshot
    - name: kraken-render.service
      command: start
      content: |
        [Unit]
        Requires=download-kraken-services.service
        After=download-kraken-services.service

        [Service]
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kraken-render.sh
        ExecStartPre=/usr/bin/chmod +x /opt/bin/kraken-create.sh
        ExecStart=/usr/bin/bash /opt/bin/kraken-render.sh
        RemainAfterExit=true
        Type=oneshot
    - name: kraken-create-skydns.service
      command: start
      content: |
        [Unit]
        Description=Kubernetes cluster DNS service
        Requires=kraken-render.service
        After=kraken-render.service

        [Service]
        TimeoutStartSec=0
        ExecStart=/usr/bin/bash /opt/bin/kraken-create.sh skydns
        RemainAfterExit=true
        Type=oneshot
    - name: wait4skydns.service
      command: start
      content: |
        [Unit]
        Description=Wait for skydns service
        Requires=kraken-create-skydns.service
        After=kraken-create-skydns.service

        [Service]
        ExecStartPre=/usr/bin/chmod +x /opt/bin/wait4skydns.sh
        ExecStart=/usr/bin/bash /opt/bin/wait4skydns.sh
        RemainAfterExit=true
        Type=oneshot
    - name: kraken-create-services.service
      command: start
      content: |
        [Unit]
        Description=Launch kraken services (excluding skydns)
        Requires=wait4skydns.service
        After=wait4skydns.service

        [Service]
        TimeoutStartSec=0
        ExecStart=/usr/bin/bash /opt/bin/kraken-create.sh <%= kraken_services_dirs %>
        RemainAfterExit=true
        Type=oneshot
    - name: systemd-journal-gatewayd.socket
      command: start
      enable: yes
      content: |
        [Unit] 
        Description=Journal Gateway Service Socket
        [Socket] 
        ListenStream=/var/run/journald.sock
        Service=systemd-journal-gatewayd.service
        [Install] 
        WantedBy=sockets.target
<% if enable_logentries %>
    - name: journal-2-logentries.service
      command: start
      content: |
        [Unit]
        Description=Forward Systemd Journal to logentries.com
        After=docker.service
        Requires=docker.service
        [Service]
        TimeoutStartSec=0
        ExecStartPre=-/usr/bin/docker kill journal-2-logentries
        ExecStartPre=-/usr/bin/docker rm journal-2-logentries
        ExecStartPre=/usr/bin/docker pull quay.io/kelseyhightower/journal-2-logentries
        ExecStart=/usr/bin/bash -c \
        "/usr/bin/docker run --name journal-2-logentries \
        -v /run/journald.sock:/run/journald.sock \
        -e LOGENTRIES_TOKEN=`etcdctl get /logentries.com/token` \
        -e LOGENTRIES_URL=`etcdctl get /logentries.com/url` \
        quay.io/kelseyhightower/journal-2-logentries"
<% end %>
  update:
    group: alpha
    reboot-strategy: <%= reboot_strategy %>
