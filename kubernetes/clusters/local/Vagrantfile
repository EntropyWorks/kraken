abort "Please run with kraken script from #{File.expand_path(File.join(File.expand_path(File.dirname(__FILE__)), '..', 'kraken'))}" unless defined? VAGRANTFILE_API_VERSION

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  # plugin conflict
  if Vagrant.has_plugin?("vagrant-vbguest") then
    config.vbguest.auto_update = false
  end

  # always use Vagrants' insecure key
  config.ssh.insert_key = false
  config.ssh.forward_agent = true

  config.vm.box = coreos_boxname
  config.vm.box_version = "= #{coreos_release}"
  config.vm.box_url = "#{coreos_url}/#{coreos_release}/coreos_production_vagrant.json"

  config.trigger.after [:up, :resume] do
    info "making sure ssh agent has the default vagrant key..."
    system "ssh-add ~/.vagrant.d/insecure_private_key"
  end

  (1..(get_num_nodes.to_i + 2)).each do |i| # number of 'node' nodes + master and etcd nodes

    tmp_user_data = build_coreos_userdata(i)
    node_info = get_coreos_node_info(i)

    config.vm.define vm_name = node_info[:hostname] do |config2|
      config2.vm.hostname = vm_name

      if ENV['SERIAL_LOGGING'].to_s.downcase == 'true'
        logdir = File.join(File.dirname(__FILE__), "log")
        FileUtils.mkdir_p(logdir)

        serialFile = File.join(logdir, "#{vm_name}-serial.txt")
        FileUtils.touch(serialFile)

        config2.vm.provider :virtualbox do |vb, override|
          vb.memory = node_info[:memory]
          vb.cpus = node_info[:cpus]
          vb.customize ["modifyvm", :id, "--uart1", "0x3F8", "4"]
          vb.customize ["modifyvm", :id, "--uartmode1", serialFile]
        end
      end

      config2.vm.network :private_network, ip: base_ip_address + "#{i+100}"

      if File.exist?(tmp_user_data)
        config2.vm.provision :file, :source => "#{tmp_user_data}", :destination => "/tmp/vagrantfile-user-data"
        config2.vm.provision :shell, :privileged => true, 
        inline: <<-EOF
          mv /tmp/vagrantfile-user-data /var/lib/coreos-vagrant/
        EOF
      end

      # Output instructions on how to access the kubernetes cluster from a Mac
      if base_ip_address + "#{i+100}" == final_node_ip
        config.trigger.after [:up] do
          set_kubeconfig("local")
        end
      end

      run_tests(config2, node_info[:type]) if ENV['KRAKEN_UNITTEST']
    end
  end
end
